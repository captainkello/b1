# How do I create paths for the pages controller?# What are all the named paths created by scaffold?The “Post was successfully created” message is stored inside of the Rails flash hash, (usually just called the Flash)# to List data...<table><tr><th>Owner</th><th>TMK</th><th>Address</th></tr><% @posts.each do |post| %><tr><td><%= post.owner %></td><td><%= post.tmk %></td><td><%= post.address %></td></tr><% end %> </table><%= link_to 'New Post', new_post_path %> | <%= link_to 'Edit Post', edit_post_path(@post) %> | <%= link_to 'List Posts', posts_path %># The link_to method is one of Rails’ built-in view helpers.<%= link_to "Link Text", new_model_path %>  # or edit_model_urlThe <%= render 'form' %> line is our first introduction to partials in Rails. # an example partial with error messages...................<%= form_for(@post) do |f| %>  <% if @post.errors.any? %>  <div id="errorExplanation">    <h2><%= pluralize(@post.errors.count, "error") %> prohibited this post from being saved:</h2>    <ul>    <% @post.errors.full_messages.each do |msg| %>      <li><%= msg %></li>    <% end %>    </ul>  </div>  <% end %>  <div class="field">    <%= f.label :name %><br />    <%= f.text_field :name %>  </div>  <div class="field">    <%= f.label :title %><br />    <%= f.text_field :title %>  </div>  <div class="field">    <%= f.label :content %><br />    <%= f.text_area :content %>  </div>  <div class="actions">    <%= f.submit %>  </div><% end %>.................................................................Active Record supplies a great deal of functionality to your Rails models for free, including basic database CRUD (Create, Read, Update, Destroy) operations, data validation, as well as sophisticated search support and the ability to relate multiple models to one another.class Post < ActiveRecord::Base  validates :name,  :presence => true  validates :title, :presence => true,                    :length => { :minimum => 5 }endthe console does not automatically load your code afresh for each line. If you make changes to your models while the console is open, type reload! at the console prompt to load them.